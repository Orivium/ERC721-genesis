/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Testable_MerkleTreeWhitelist,
  Testable_MerkleTreeWhitelistInterface,
} from "../../../contracts/test/Testable_MerkleTreeWhitelist";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_ogRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotUniqueRootHash",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOGWhitelist",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyWhitelist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "isOGWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "test_OGReserved",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "test_WLReserved",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "test_isOGWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "test_isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000bab38038062000bab8339818101604052810190620000379190620001b1565b818162000055671f348d5e5328e6e560c01b6200016b60201b60201c565b62000071675802eddea32575be60c01b6200016b60201b60201c565b6200008d67b5f56469b0fb3c0760c01b6200016b60201b60201c565b808203620000e357620000b167d87f3c985cb888f960c01b6200016b60201b60201c565b6040517fed214eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620000ff6730c2284a45ec794e60c01b6200016b60201b60201c565b6200011b67a47ca17410cce20260c01b6200016b60201b60201c565b816000819055506200013e6765834946b6aaea6660c01b6200016b60201b60201c565b806001819055505050620001636777159bb8c60ba55e60c01b6200016e60201b60201c565b5050620001f8565b50565b50565b600080fd5b6000819050919050565b6200018b8162000176565b81146200019757600080fd5b50565b600081519050620001ab8162000180565b92915050565b60008060408385031215620001cb57620001ca62000171565b5b6000620001db858286016200019a565b9250506020620001ee858286016200019a565b9150509250929050565b6109a380620002086000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063b25cd87211610050578063b25cd87214610107578063b9fe8d7614610123578063e9234d031461013f57610072565b80635a23dd99146100775780636bc5c285146100a7578063823a59b4146100d7575b600080fd5b610091600480360381019061008c9190610777565b61016f565b60405161009e91906107f2565b60405180910390f35b6100c160048036038101906100bc9190610777565b610258565b6040516100ce91906107f2565b60405180910390f35b6100f160048036038101906100ec9190610777565b6102aa565b6040516100fe91906107f2565b60405180910390f35b610121600480360381019061011c919061080d565b6102fc565b005b61013d6004803603810190610138919061080d565b610400565b005b61015960048036038101906101549190610777565b610504565b60405161016691906107f2565b60405180910390f35b6000610185673760b1fdec7fa2ca60c01b6105ed565b61019967f135f07ce91b01b160c01b6105ed565b6101ad67a5f0416ac69d04cf60c01b6105ed565b6000846040516020016101c091906108a2565b6040516020818303038152906040528051906020012090506101ec6765556d334676e0db60c01b6105ed565b610200679ed7273bbb7f445660c01b6105ed565b61024e848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600054836105f0565b9150509392505050565b600061026e67498541f2d161e12160c01b610607565b610282678581fb6a629d804360c01b610607565b61029667acd27848a611d24a60c01b610607565b6102a1848484610504565b90509392505050565b60006102c0670478e89e373d44e660c01b610607565b6102d467424bcb1a307f995f60c01b610607565b6102e8674c4c44b48fed14f560c01b610607565b6102f384848461016f565b90509392505050565b61031067b651dac8fc1b275960c01b610607565b81816103266715e86e490b7cf87960c01b6105ed565b61033a67e4cdb4f84c276b5760c01b6105ed565b61034e67c0b52a8a27e4104260c01b6105ed565b61036061035961060a565b838361016f565b6103aa5761037867fd382b0dbe02bda560c01b6105ed565b6040517fd9d4528c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103be6741d3aa66cec1773160c01b6105ed565b6103d267b00302e3eec0827c60c01b6105ed565b6103e667f9c46173a5ded83560c01b610607565b6103fa676532abd5163a8f6860c01b610607565b50505050565b61041467ed5daaad58008f6b60c01b610607565b818161042a67c978e4ee8fab0a5f60c01b6105ed565b61043e6796f21ff68d1bd5c360c01b6105ed565b6104526730436ecd454120f160c01b6105ed565b61046461045d61060a565b8383610504565b6104ae5761047c67d9203a4862dd58f760c01b6105ed565b6040517f544be26500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104c2678643ec4979e55fca60c01b6105ed565b6104d66722715a7d2cfdd20060c01b6105ed565b6104ea671f7a6c76fb5fb53260c01b610607565b6104fe67524eebf145be87fa60c01b610607565b50505050565b600061051a67e9a2c275f2ab918a60c01b6105ed565b61052e6740138f95feec3e0d60c01b6105ed565b61054267d50f9db7809121fc60c01b6105ed565b60008460405160200161055591906108a2565b60405160208183030381529060405280519060200120905061058167e078655688b3e8e460c01b6105ed565b6105956747d7bb3ffe156f7860c01b6105ed565b6105e3848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600154836105f0565b9150509392505050565b50565b6000826105fd8584610612565b1490509392505050565b50565b600033905090565b60008082905060005b845181101561065d576106488286838151811061063b5761063a6108bd565b5b6020026020010151610668565b9150808061065590610925565b91505061061b565b508091505092915050565b60008183106106805761067b8284610693565b61068b565b61068a8383610693565b5b905092915050565b600082600052816020526040600020905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106df826106b4565b9050919050565b6106ef816106d4565b81146106fa57600080fd5b50565b60008135905061070c816106e6565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261073757610736610712565b5b8235905067ffffffffffffffff81111561075457610753610717565b5b6020830191508360208202830111156107705761076f61071c565b5b9250929050565b6000806000604084860312156107905761078f6106aa565b5b600061079e868287016106fd565b935050602084013567ffffffffffffffff8111156107bf576107be6106af565b5b6107cb86828701610721565b92509250509250925092565b60008115159050919050565b6107ec816107d7565b82525050565b600060208201905061080760008301846107e3565b92915050565b60008060208385031215610824576108236106aa565b5b600083013567ffffffffffffffff811115610842576108416106af565b5b61084e85828601610721565b92509250509250929050565b60008160601b9050919050565b60006108728261085a565b9050919050565b600061088482610867565b9050919050565b61089c610897826106d4565b610879565b82525050565b60006108ae828461088b565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006109308261091b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610962576109616108ec565b5b60018201905091905056fea264697066735822122079298a8c45a287d84b9a141b4a7a2b48f011b606af06f4ac51296acb63e2356664736f6c63430008140033";

type Testable_MerkleTreeWhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Testable_MerkleTreeWhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Testable_MerkleTreeWhitelist__factory extends ContractFactory {
  constructor(...args: Testable_MerkleTreeWhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _root: BytesLike,
    _ogRoot: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_root, _ogRoot, overrides || {});
  }
  override deploy(
    _root: BytesLike,
    _ogRoot: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_root, _ogRoot, overrides || {}) as Promise<
      Testable_MerkleTreeWhitelist & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): Testable_MerkleTreeWhitelist__factory {
    return super.connect(runner) as Testable_MerkleTreeWhitelist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Testable_MerkleTreeWhitelistInterface {
    return new Interface(_abi) as Testable_MerkleTreeWhitelistInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Testable_MerkleTreeWhitelist {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as Testable_MerkleTreeWhitelist;
  }
}
