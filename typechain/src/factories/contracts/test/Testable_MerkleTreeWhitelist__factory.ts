/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Testable_MerkleTreeWhitelist,
  Testable_MerkleTreeWhitelistInterface,
} from "../../../contracts/test/Testable_MerkleTreeWhitelist";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_ogRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "OnlyOGWhitelist",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyWhitelist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "isOGWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "test_OGReserved",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "test_WLReserved",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "test_isOGWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "test_isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610947380380610947833981810160405281019061003291906100b9565b818161004e67b4860472aa8faf2560c01b6100b360201b60201c565b610068676ce50794b9ff26c260c01b6100b360201b60201c565b8160008190555061008967efc9e323f12a548060c01b6100b360201b60201c565b8060018190555050506100ac6777159bb8c60ba55e60c01b6100b660201b60201c565b50506100de565b50565b50565b600080604083850312156100cc57600080fd5b82519150602083015190509250929050565b61085a806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063b25cd87211610050578063b25cd87214610107578063b9fe8d7614610123578063e9234d031461013f57610072565b80635a23dd99146100775780636bc5c285146100a7578063823a59b4146100d7575b600080fd5b610091600480360381019061008c91906106f1565b61016f565b60405161009e9190610765565b60405180910390f35b6100c160048036038101906100bc91906106f1565b610258565b6040516100ce9190610765565b60405180910390f35b6100f160048036038101906100ec91906106f1565b6102aa565b6040516100fe9190610765565b60405180910390f35b610121600480360381019061011c9190610778565b6102fc565b005b61013d60048036038101906101389190610778565b610400565b005b610159600480360381019061015491906106f1565b610504565b6040516101669190610765565b60405180910390f35b600061018567778f9cc47875c33460c01b6105ed565b61019967b31d1033af0829b060c01b6105ed565b6101ad6752ed853918e2205c60c01b6105ed565b6000846040516020016101c091906107bf565b6040516020818303038152906040528051906020012090506101ec67e0845b2c105222db60c01b6105ed565b610200674e6b0c8d369f258560c01b6105ed565b61024e848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600054836105f0565b9150509392505050565b600061026e67498541f2d161e12160c01b610607565b610282678581fb6a629d804360c01b610607565b61029667acd27848a611d24a60c01b610607565b6102a1848484610504565b90509392505050565b60006102c0670478e89e373d44e660c01b610607565b6102d467424bcb1a307f995f60c01b610607565b6102e8674c4c44b48fed14f560c01b610607565b6102f384848461016f565b90509392505050565b61031067b651dac8fc1b275960c01b610607565b818161032667982265eaec9482f960c01b6105ed565b61033a6777f788144500280260c01b6105ed565b61034e677ea2325b08778b4960c01b6105ed565b61036061035961060a565b838361016f565b6103aa57610378676e9bd7338b37f92f60c01b6105ed565b6040517fd9d4528c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103be674c3cb8e4c412ee0160c01b6105ed565b6103d267090869ee79a5b1ff60c01b6105ed565b6103e667f9c46173a5ded83560c01b610607565b6103fa676532abd5163a8f6860c01b610607565b50505050565b61041467ed5daaad58008f6b60c01b610607565b818161042a67da23029c4387f47660c01b6105ed565b61043e67be5488898b37ab4660c01b6105ed565b61045267ab479381e1bd2d6b60c01b6105ed565b61046461045d61060a565b8383610504565b6104ae5761047c675c98f9a17ba86b8360c01b6105ed565b6040517f544be26500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104c26707f1a59b019753bb60c01b6105ed565b6104d6671b657676e69daff060c01b6105ed565b6104ea671f7a6c76fb5fb53260c01b610607565b6104fe67524eebf145be87fa60c01b610607565b50505050565b600061051a67b18c419cd735e0c560c01b6105ed565b61052e67349dcdb025ee0cb260c01b6105ed565b61054267bb73b29c13f6b30a60c01b6105ed565b60008460405160200161055591906107bf565b6040516020818303038152906040528051906020012090506105816779f13d8306aa54a960c01b6105ed565b61059567a4bdfa6c4164ad4760c01b6105ed565b6105e3848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600154836105f0565b9150509392505050565b50565b6000826105fd8584610612565b1490509392505050565b50565b600033905090565b60008082905060005b8451811015610657576106488286838151811061063b5761063a6107f5565b5b6020026020010151610662565b9150808060010191505061061b565b508091505092915050565b600081831061067a57610675828461068d565b610685565b610684838361068d565b5b905092915050565b600082600052816020526040600020905092915050565b60008083601f8401126106b657600080fd5b8235905067ffffffffffffffff8111156106cf57600080fd5b6020830191508360208260051b85010111156106ea57600080fd5b9250929050565b60008060006040848603121561070657600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461072a57600080fd5b80935050602084013567ffffffffffffffff81111561074857600080fd5b610754868287016106a4565b915080935050809150509250925092565b6000602082019050821515825292915050565b6000806020838503121561078b57600080fd5b823567ffffffffffffffff8111156107a257600080fd5b6107ae858286016106a4565b915080935050809150509250929050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008260601b168152600060148201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212203b44e58209c22b4cf09683ec77027d34105a63ee3cf35eeb45a9424418c103a064736f6c63430008160033";

type Testable_MerkleTreeWhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Testable_MerkleTreeWhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Testable_MerkleTreeWhitelist__factory extends ContractFactory {
  constructor(...args: Testable_MerkleTreeWhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _root: BytesLike,
    _ogRoot: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_root, _ogRoot, overrides || {});
  }
  override deploy(
    _root: BytesLike,
    _ogRoot: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_root, _ogRoot, overrides || {}) as Promise<
      Testable_MerkleTreeWhitelist & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): Testable_MerkleTreeWhitelist__factory {
    return super.connect(runner) as Testable_MerkleTreeWhitelist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Testable_MerkleTreeWhitelistInterface {
    return new Interface(_abi) as Testable_MerkleTreeWhitelistInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Testable_MerkleTreeWhitelist {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as Testable_MerkleTreeWhitelist;
  }
}
