/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Testable_MerkleTreeWhitelist,
  Testable_MerkleTreeWhitelistInterface,
} from "../../../contracts/test/Testable_MerkleTreeWhitelist";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_ogRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotUniqueRootHash",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOGWhitelist",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyWhitelist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "isOGWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "test_OGReserved",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "test_WLReserved",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "test_isOGWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "test_isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161055138038061055183398101604081905261002f91610062565b818180820361005157604051637690a75b60e11b815260040160405180910390fd5b600091909155600155506100869050565b6000806040838503121561007557600080fd5b505080516020909101519092909150565b6104bc806100956000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063b25cd87211610050578063b25cd872146100c4578063b9fe8d76146100d9578063e9234d03146100ec57600080fd5b80635a23dd99146100775780636bc5c2851461009e578063823a59b4146100b1575b600080fd5b61008a6100853660046103a7565b6100ff565b604051901515815260200160405180910390f35b61008a6100ac3660046103a7565b610196565b61008a6100bf3660046103a7565b6101ab565b6100d76100d2366004610415565b6101b8565b005b6100d76100e7366004610415565b610201565b61008a6100fa3660046103a7565b610244565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085901b166020820152600090819060340160405160208183030381529060405280519060200120905061018d84848080602002602001604051908101604052809392919081815260200183836020028082843760009201829052505492508591506102d09050565b95945050505050565b60006101a3848484610244565b949350505050565b60006101a38484846100ff565b81816101c53383836100ff565b6101fb576040517fd9d4528c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b818161020e338383610244565b6101fb576040517f544be26500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085901b166020820152600090819060340160405160208183030381529060405280519060200120905061018d8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060015491508490505b6000826102dd85846102e6565b14949350505050565b600081815b8451811015610321576103178286838151811061030a5761030a610457565b6020026020010151610329565b91506001016102eb565b509392505050565b6000818310610345576000828152602084905260409020610354565b60008381526020839052604090205b9392505050565b60008083601f84011261036d57600080fd5b50813567ffffffffffffffff81111561038557600080fd5b6020830191508360208260051b85010111156103a057600080fd5b9250929050565b6000806000604084860312156103bc57600080fd5b833573ffffffffffffffffffffffffffffffffffffffff811681146103e057600080fd5b9250602084013567ffffffffffffffff8111156103fc57600080fd5b6104088682870161035b565b9497909650939450505050565b6000806020838503121561042857600080fd5b823567ffffffffffffffff81111561043f57600080fd5b61044b8582860161035b565b90969095509350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220837b3af0322f2fc08cd3dda47ecade1416c1fb420f4973f7d0dce1e3505d1be064736f6c63430008160033";

type Testable_MerkleTreeWhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Testable_MerkleTreeWhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Testable_MerkleTreeWhitelist__factory extends ContractFactory {
  constructor(...args: Testable_MerkleTreeWhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _root: BytesLike,
    _ogRoot: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_root, _ogRoot, overrides || {});
  }
  override deploy(
    _root: BytesLike,
    _ogRoot: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_root, _ogRoot, overrides || {}) as Promise<
      Testable_MerkleTreeWhitelist & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): Testable_MerkleTreeWhitelist__factory {
    return super.connect(runner) as Testable_MerkleTreeWhitelist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Testable_MerkleTreeWhitelistInterface {
    return new Interface(_abi) as Testable_MerkleTreeWhitelistInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Testable_MerkleTreeWhitelist {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as Testable_MerkleTreeWhitelist;
  }
}
